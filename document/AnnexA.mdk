# Annex A (informative) Use of fingerprints by result management systems { - #Annex-A }

On large software projects, a single run of a set of static analysis tools can produce hundreds of thousands of results or more.
To deal with such a large number of results, some software development teams adopt a strategy whereby they first
prevent the introduction of new problems into their code, and then work to address the existing problems.

To prevent the introduction of new problems, it is necessary first to record the results from a designated run.
We refer to this as a baseline.
It is then necessary to compare the results from a subsequent run with the baseline.

To determine whether a result from a subsequent run is the same as a result from the baseline,
there must be a way to use information contained in the result to construct a stable identifier for the result.
We refer to this identifier as a fingerprint.

A result management system can construct a fingerprint by using information contained in the SARIF file such as

*	the name of the tool that produced the result.
*	the rule id.
*	the file system path to the analysis target.

There are situations where information that would be helpful in uniquely identifying a result is not easily detectable
by the result management system.
For example, consider a tool which checks documentation for words that are culturally or politically sensitive.
The word would most likely occur only in the `fullMessage` property, for example:
`"The word xxx should not be used in documentation."`

The SARIF format provides the `toolFingerprint` property to allow static analysis tools to provide additional information
which a result management system can incorporate into the fingerprint that it constructs for each result.
In this example, the tool might set the value of `toolFingerprint` to the prohibited word.

Some information contained in the result is not useful in constructing a fingerprint.
For example, suppose the fingerprint were to include the line number where the result was located,
and suppose that after the baseline was constructed,
a developer inserted additional lines of code above that location.
Then in the next run, the result would occur on a different line, the computed fingerprint would change,
and the result management system would erroneously report it as a new result.

It is difficult to devise an algorithm that constructs a truly stable fingerprint for a result.
Fortunately, for practical purposes, the fingerprint need not be absolutely stable;
it need only be stable enough to reduce the number of results that are erroneously reported as "new"
to a low enough level that the development team can manage the erroneously reported results without too much effort.

