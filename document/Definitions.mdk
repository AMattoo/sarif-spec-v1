# Terms and definitions { #terms-and-definitions }

For the purposes of this document, the following terms and definitions apply:

file
  ~ sequence of bytes accessible _via_ a URI
  ~ Example: a physical file in a file system,
    a specific version of a file in a version control system.

(programming) artifact
  ~ file, produced manually by a person or automatically by a program, which results from
    the activity of programming
  ~ Example: Source code, object code, program configuration data, documentation.

result
  ~ condition present in a programming artifact

problem
  ~ result which indicates a condition that has the potential to detract from the quality of the program
  ~ Example: A security vulnerability,
    a deviation from conformance to contractual or legal requirements,
    a deviation from conformance to stylistic standards.

(static analysis) tool
  ~ program that examines programming artifacts in order to detect problems, without executing the program
  ~ Example: Lint

conversion tool, converter
  ~ program that converts the output of another program into a different format

analysis target
  ~ programming artifact which a static analysis tool is instructed to analyze

result file
  ~ file in which a static analysis tool detects a problem

rule
  ~ specific criterion for correctness verified by a static analysis tool
  ~ NOTE 1: Many static analysis tools associate a "rule id" with each result they report, but some do not.
  ~ NOTE 2: Some rules verify generally accepted criteria for correctness;
    others verify conventions in use in a particular team or organization.
  ~ Example: "Variables must be initialized before use", "Class names must begin with an uppercase letter".

stable value
  ~ value which, once established, never changes over time

rule id
  ~ stable value which a static analysis tool associates with a rule
  ~ NOTE: A rule id is more likely to remain stable if it is a symbolic or numeric value, as opposed to a descriptive string.
  ~ Example: `CA2001`

rule metadata
  ~ Information that describes a rule
  ~ Example: Category (for example, "Style" or "Security"), documentation URL 

log file
  ~ output file produced by a static analysis tool, which enumerates the results produced by the tool

run
  ~ 1. invocation of a specified set of static analysis tools on a specified version of a specified set of analysis targets,
       with a specified set of runtime parameters
  ~ 2. set of results produced by such an invocation.

triage
  ~ process of deciding whether a result reported by a static analysis tool indicates a problem that should be corrected

(end) user
  ~ person who uses the information in a log file to investigate, triage, or resolve results detected by a static analysis tool

false positive
  ~ result which an end user decides does not actually represent a problem in the analysis target

(result log) viewer
  ~ software program that reads a log file, displays a list of the results it contains,
    and allows an end user to view each result in the context of the programming artifact in which it occurs

result management system
  ~ software system that consumes the log files produced by static analysis tools,
    produces reports that enable software development teams to assess the quality of their software artifacts at a point in time
    and to observe trends in the quality over time,
    and performs functions such as filing bugs and displaying information about individual results
  ~ NOTE: A result management system can interact with a result log viewer to display information about individual defects.

fingerprint
  ~ stable value that can be used by a result management system to uniquely identify a result over time,
    even if the programming artifact in which it occurs is modified

baseline
  ~ set of results produced by a single run of a set of static analysis tools on a set of programming artifacts
  ~ NOTE: A result management system can compare the results of a subsequent run to a baseline to determine whether new results have been introduced.

flow analysis
  ~ process used by some static analysis tools to detect problems by simulating the flow of execution through a portion of the program without actually executing the program

code flow
  ~ sequence of program locations that specify a possible execution path through the code

call stack
  ~ sequence of nested function calls

camelCase name
  ~ name that begins with a lowercase letter, and in which each subsequent word begins with an uppercase letter
  ~ Example: `camelCase`, `version`, `fullName`.

tag set
  ~ a JSON array containing zero or more arbitrary strings, no two of which are the same

property bag
  ~ a JSON object consisting of a set of name/value pairs with arbitrary camelCase names

newline sequence
  ~ sequence of one or more characters representing the end of a line of text
  ~ Note: Some systems represent a newline sequence with a single newline character; others represent it as a carriage return character followed by a newline character.

text file
  ~ file considered as a sequence of characters organized into lines and columns

line
  ~ contiguous sequence of characters, starting either at the beginning of a file
    or immediately after a newline sequence, and ending at and including the nearest subsequent newline sequence,
    if one is present, or else extending to the end of the file

column
  ~ 1-based index of a character within a line

binary file
  ~ file considered as a sequence of bytes

region
  ~ contiguous portion of a file

text region
  ~ region representing a contiguous range of zero or more character in a text file

binary region
  ~ region representing a contiguous range of zero or more bytes in a binary file

physical location
  ~ location specified by reference to a programming artifact together with a range of bytes or characters within that artifact

logical location
  ~ location specified by reference to a programmatic construct, without specifying the programming artifact within which that construct occurs
  ~ Example: A class name, a method name, a namespace.

empty array
  ~ array that contains no elements, and so has a length of 0

empty string
  ~ string that contains no characters, and so has a length of 0

core format
  ~ set of SARIF elements that are intended to be useful in a variety of scenarios where static analysis results
    are produced or consumed

profile
  ~ set of SARIF elements that are intended to be useful in a specific static analysis usage scenario