# Annex C (informative) Production of SARIF by conversion tools { - #Annex-C }

There are two broad categories of tools that can produce output in the SARIF format.
Static analysis tools produce SARIF as a result of performing a scan on a set of analysis targets.
Converters translate existing data from a non-SARIF format into the SARIF format.
That data might come from a static analysis tool that produces output in a non-SARIF format,
from a bug database, or from any other source.

This Annex provides guidance to the implementers of converters.
In this Annex, the words "should" and "may" are used non-normatively,
purely to express that guidance.

Converters should populate those elements of the SARIF format
for which a direct equivalent exists in the input data.

If the input data includes information for which there is no SARIF equivalent,
converters may use it to populate the various property bags and tag lists defined by the SARIF format,
or they may simply omit it from the output.
When populating a property bag with such information,
converters should use a property name that matches the name of that piece of information in the
native tool format (assuming of course that that name is a valid JSON property name),
even if that name does not conform to the camelCase convention used in the rest of this specification.
This makes it easier to match these properties with the source data in the native tool format.

If the input data does not include an equivalent for any SARIF element,
the converter should _not_ attempt to synthesize that element.
For example, a converter should not attempt to heuristically extract a rule id from the text of an unstructured error message.

If a converter were to synthesize values, it would potentially introduces additional complexity in the implementation of SARIF viewers.
The reason is that the viewer itself might examine the analysis tool and its version in the `toolInfo`,
and attempt to synthesize missing elements.

Now suppose a converter made a bad choice in synthesizing a missing element, and then fixed the problem in an update.
As a result, two log files claiming to have been produced by the same version of the same static analysis tools
might have different elements filled in, or the same elements filled in differently.
For that matter, two different converters might make different choices in how to synthesize missing elements.
As a result, the viewer would have to take into account both the analysis tool (and its version)
and the converter (and its version) in deciding how to synthesize any remaining elements. 

By design, to avoid this added complexity, the SARIF standard does not define an element to hold the converter version.
This, together with the guidance that converter implementers should not attempt to synthesize missing elements,
allows viewer implementers to assume that all files from the same version of the same tool are identical in structure.